{"remainingRequest":"/Users/ruki/projects/personal/xmake-docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/ruki/projects/personal/xmake-docs/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/ruki/projects/personal/xmake-docs/src/guide/getting-started.md?vue&type=template&id=d7bc09fe&","dependencies":[{"path":"/Users/ruki/projects/personal/xmake-docs/src/guide/getting-started.md","mtime":1541598674687},{"path":"/Users/ruki/projects/personal/xmake-docs/node_modules/cache-loader/dist/cjs.js","mtime":1541484124233},{"path":"/Users/ruki/projects/personal/xmake-docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1541484125571},{"path":"/Users/ruki/projects/personal/xmake-docs/node_modules/cache-loader/dist/cjs.js","mtime":1541484124233},{"path":"/Users/ruki/projects/personal/xmake-docs/node_modules/vue-loader/lib/index.js","mtime":1541484125571},{"path":"/Users/ruki/projects/personal/xmake-docs/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1541484147168}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"getting-started\"><a class=\"header-anchor\" href=\"#getting-started\" aria-hidden=\"true\">#</a> Getting Started</h1>\n<h2 id=\"installation\"><a class=\"header-anchor\" href=\"#installation\" aria-hidden=\"true\">#</a> Installation</h2>\n<h4 id=\"master\"><a class=\"header-anchor\" href=\"#master\" aria-hidden=\"true\">#</a> Master</h4>\n<h5 id=\"via-curl\"><a class=\"header-anchor\" href=\"#via-curl\" aria-hidden=\"true\">#</a> via curl</h5>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token function\">bash</span> <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>curl -fsSL https://raw.githubusercontent.com/tboox/xmake/master/scripts/get.sh<span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h5 id=\"via-wget\"><a class=\"header-anchor\" href=\"#via-wget\" aria-hidden=\"true\">#</a> via wget</h5>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token function\">bash</span> <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>wget https://raw.githubusercontent.com/tboox/xmake/master/scripts/get.sh -O -<span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h5 id=\"via-powershell\"><a class=\"header-anchor\" href=\"#via-powershell\" aria-hidden=\"true\">#</a> via powershell</h5>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>Invoke-Expression <span class=\"token punctuation\">(</span>Invoke-Webrequest <span class=\"token string\">'https://raw.githubusercontent.com/tboox/xmake/master/scripts/get.ps1'</span> -UseBasicParsing<span class=\"token punctuation\">)</span>.Content\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"windows\"><a class=\"header-anchor\" href=\"#windows\" aria-hidden=\"true\">#</a> Windows</h4>\n<ol>\n<li>Download xmake windows installer from <a href=\"https://github.com/tboox/xmake/releases\" target=\"_blank\" rel=\"noopener noreferrer\">Releases<OutboundLink/></a></li>\n<li>Run xmake-[version].exe</li>\n</ol>\n<h4 id=\"macos\"><a class=\"header-anchor\" href=\"#macos\" aria-hidden=\"true\">#</a> MacOS</h4>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ brew <span class=\"token function\">install</span> xmake\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"linux\"><a class=\"header-anchor\" href=\"#linux\" aria-hidden=\"true\">#</a> Linux</h4>\n<p>On Archlinux:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ yaourt xmake\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>On Ubuntu:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ <span class=\"token function\">sudo</span> add-apt-repository ppa:tboox/xmake\n$ <span class=\"token function\">sudo</span> apt update\n$ <span class=\"token function\">sudo</span> apt <span class=\"token function\">install</span> xmake\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Or add xmake package source manually:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>deb http://ppa.launchpad.net/tboox/xmake/ubuntu yakkety main \ndeb-src http://ppa.launchpad.net/tboox/xmake/ubuntu yakkety main \n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Then we run:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ <span class=\"token function\">sudo</span> apt update\n$ <span class=\"token function\">sudo</span> apt <span class=\"token function\">install</span> xmake\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Or download deb package to install it:</p>\n<ol>\n<li>Download xmake <code>.deb</code> install package from <a href=\"https://github.com/tboox/xmake/releases\" target=\"_blank\" rel=\"noopener noreferrer\">Releases<OutboundLink/></a></li>\n<li>Run <code>dpkg -i xmake-xxxx.deb</code></li>\n</ol>\n<h4 id=\"compilation\"><a class=\"header-anchor\" href=\"#compilation\" aria-hidden=\"true\">#</a> Compilation</h4>\n<p>Compile and install:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> clone https://github.com/tboox/xmake.git\n$ <span class=\"token function\">cd</span> ./xmake\n$ ./scripts/get.sh __local__\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Only install and update lua scripts:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ ./scripts/get.sh __local__ __install_only__\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Uninstall:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ ./scripts/get.sh __uninstall__\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Or compile and install via make:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ <span class=\"token function\">make</span> build<span class=\"token punctuation\">;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Install to other given directory:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ <span class=\"token function\">sudo</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span> prefix<span class=\"token operator\">=</span>/usr/local\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Uninstall:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ <span class=\"token function\">sudo</span> <span class=\"token function\">make</span> uninstall\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"quick-start\"><a class=\"header-anchor\" href=\"#quick-start\" aria-hidden=\"true\">#</a> Quick Start</h2>\n<p><a href=\"https://asciinema.org/a/133693\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://asciinema.org/a/133693.png\" alt=\"asciicast\"><OutboundLink/></a></p>\n<h4 id=\"create-project\"><a class=\"header-anchor\" href=\"#create-project\" aria-hidden=\"true\">#</a> Create Project</h4>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake create -l c -P ./hello\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>And xmake will generate some files for c language project:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>hello\n├── src\n│   └── main.c\n└── xmake.lua\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>It is a simple console program only for printing <code>hello xmake!</code></p>\n<p>The content of <code>xmake.lua</code> is very simple:</p>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">set_kind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"binary\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/*.c\"</span><span class=\"token punctuation\">)</span> \n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Support languages:</p>\n<ul>\n<li>c/c++</li>\n<li>objc/c++</li>\n<li>asm</li>\n<li>swift</li>\n<li>dlang</li>\n<li>golang</li>\n<li>rust</li>\n</ul>\n<p class=\"tip\">\n    If you want to known more options, please run: `xmake create --help`\n</p>\n<h4 id=\"build-project\"><a class=\"header-anchor\" href=\"#build-project\" aria-hidden=\"true\">#</a> Build Project</h4>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"run-program\"><a class=\"header-anchor\" href=\"#run-program\" aria-hidden=\"true\">#</a> Run Program</h4>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake run hello\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"debug-program\"><a class=\"header-anchor\" href=\"#debug-program\" aria-hidden=\"true\">#</a> Debug Program</h4>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake run -d hello \n</code></pre>\n<!--beforeend--></div><!--afterend--><p>It will start the debugger (.e.g lldb, gdb, windbg, vsjitdebugger, ollydbg ..) to load our program.</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token punctuation\">[</span>lldb<span class=\"token punctuation\">]</span><span class=\"token variable\">$target</span> create <span class=\"token string\">\"build/hello\"</span>\nCurrent executable <span class=\"token keyword\">set</span> to <span class=\"token string\">'build/hello'</span> <span class=\"token punctuation\">(</span>x86_64<span class=\"token punctuation\">)</span>.\n<span class=\"token punctuation\">[</span>lldb<span class=\"token punctuation\">]</span><span class=\"token variable\">$b</span> main\nBreakpoint 1: where <span class=\"token operator\">=</span> hello<span class=\"token variable\"><span class=\"token variable\">`</span>main, address <span class=\"token operator\">=</span> 0x0000000100000f50\n<span class=\"token punctuation\">[</span>lldb<span class=\"token punctuation\">]</span>$r\nProcess 7509 launched: <span class=\"token string\">'/private/tmp/hello/build/hello'</span> <span class=\"token punctuation\">(</span>x86_64<span class=\"token punctuation\">)</span>\nProcess 7509 stopped\n* thread #1: tid <span class=\"token operator\">=</span> 0x435a2, 0x0000000100000f50 hello<span class=\"token variable\">`</span></span>main, queue <span class=\"token operator\">=</span> <span class=\"token string\">'com.apple.main-thread'</span>, stop reason <span class=\"token operator\">=</span> breakpoint 1.1\n    frame <span class=\"token comment\">#0: 0x0000000100000f50 hello`main</span>\nhello`main:\n-<span class=\"token operator\">></span>  0x100000f50 <span class=\"token operator\">&lt;</span>+0<span class=\"token operator\">></span>:  pushq  %rbp\n    0x100000f51 <span class=\"token operator\">&lt;</span>+1<span class=\"token operator\">></span>:  movq   %rsp, %rbp\n    0x100000f54 <span class=\"token operator\">&lt;</span>+4<span class=\"token operator\">></span>:  leaq   0x2b<span class=\"token punctuation\">(</span>%rip<span class=\"token punctuation\">)</span>, %rdi          <span class=\"token punctuation\">;</span> <span class=\"token string\">\"hello world!\"</span>\n    0x100000f5b <span class=\"token operator\">&lt;</span>+11<span class=\"token operator\">></span>: callq  0x100000f64               <span class=\"token punctuation\">;</span> symbol stub for: puts\n<span class=\"token punctuation\">[</span>lldb<span class=\"token punctuation\">]</span>$\n</code></pre>\n<!--beforeend--></div><!--afterend--><p class=\"tip\">\n    You can also use short command option, for exmaple: `xmake r` or `xmake run`\n</p>\n<h2 id=\"project-examples\"><a class=\"header-anchor\" href=\"#project-examples\" aria-hidden=\"true\">#</a> Project Examples</h2>\n<h4 id=\"executable-program\"><a class=\"header-anchor\" href=\"#executable-program\" aria-hidden=\"true\">#</a> Executable Program</h4>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">set_kind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"binary\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/*c\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"static-library-program\"><a class=\"header-anchor\" href=\"#static-library-program\" aria-hidden=\"true\">#</a> Static Library Program</h4>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"library\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">set_kind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"static\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/library/*.c\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">set_kind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"binary\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/*c\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_deps</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"library\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>We use <code>add_deps</code> to link a static library to test target.</p>\n<h4 id=\"share-library-program\"><a class=\"header-anchor\" href=\"#share-library-program\" aria-hidden=\"true\">#</a> Share Library Program</h4>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"library\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">set_kind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shared\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/library/*.c\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">set_kind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"binary\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/*c\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_deps</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"library\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>We use <code>add_deps</code> to link a share library to test target.</p>\n<h4 id=\"qt-program\"><a class=\"header-anchor\" href=\"#qt-program\" aria-hidden=\"true\">#</a> Qt Program</h4>\n<p>Create an empty project:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake create -l c++ -t console_qt <span class=\"token function\">test</span>\n$ xmake create -l c++ -t static_qt <span class=\"token function\">test</span>\n$ xmake create -l c++ -t shared_qt <span class=\"token function\">test</span>\n$ xmake create -l c++ -t quickapp_qt <span class=\"token function\">test</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>xmake will detect Qt SDK automatically and we can also set the SDK directory manually.</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake f --qt<span class=\"token operator\">=</span>~/Qt/Qt5.9.1\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If you want to use the MinGW Qt environment on windows, you can set the MinGW platform configuration and specify the SDK path for the MinGW compilation environment, for example:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake f -p mingw --sdk<span class=\"token operator\">=</span>C:\\Qt\\Qt5.10.1\\Tools\\mingw530_32 \n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If you want to known more information, you can see <a href=\"https://github.com/tboox/xmake/issues/160\" target=\"_blank\" rel=\"noopener noreferrer\">#160<OutboundLink/></a>.</p>\n<h5 id=\"static-library\"><a class=\"header-anchor\" href=\"#static-library\" aria-hidden=\"true\">#</a> Static Library</h5>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qt_static_library\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_rules</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qt.static\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/*.cpp\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_frameworks</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"QtNetwork\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"QtGui\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h5 id=\"shared-library\"><a class=\"header-anchor\" href=\"#shared-library\" aria-hidden=\"true\">#</a> Shared Library</h5>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qt_shared_library\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_rules</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qt.shared\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/*.cpp\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_frameworks</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"QtNetwork\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"QtGui\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h5 id=\"console-program\"><a class=\"header-anchor\" href=\"#console-program\" aria-hidden=\"true\">#</a> Console Program</h5>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qt_console\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_rules</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qt.console\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/*.cpp\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h5 id=\"quick-application\"><a class=\"header-anchor\" href=\"#quick-application\" aria-hidden=\"true\">#</a> Quick Application</h5>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qt_quickapp\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_rules</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qt.application\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/*.cpp\"</span><span class=\"token punctuation\">)</span> \n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/qml.qrc\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_frameworks</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"QtQuick\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h5 id=\"widgets-application\"><a class=\"header-anchor\" href=\"#widgets-application\" aria-hidden=\"true\">#</a> Widgets Application</h5>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qt_widgetapp\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_rules</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qt.application\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/*.cpp\"</span><span class=\"token punctuation\">)</span> \n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/mainwindow.ui\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/mainwindow.h\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">-- add files with Q_OBJECT meta (only for qt.moc)</span>\n    <span class=\"token function\">add_frameworks</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"QtWidgets\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"cuda-program\"><a class=\"header-anchor\" href=\"#cuda-program\" aria-hidden=\"true\">#</a> Cuda Program</h4>\n<p>Create an empty project:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake create -P <span class=\"token function\">test</span> -l cuda\n$ <span class=\"token function\">cd</span> <span class=\"token function\">test</span>\n$ xmake\n</code></pre>\n<!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cuda_console\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">set_kind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"binary\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/*.cu\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">-- generate SASS code for each SM architecture</span>\n    <span class=\"token keyword\">for</span> _<span class=\"token punctuation\">,</span> sm <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"30\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"35\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"37\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"50\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"52\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"60\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"61\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"70\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n        <span class=\"token function\">add_cuflags</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-gencode arch=compute_\"</span> <span class=\"token operator\">..</span> sm <span class=\"token operator\">..</span> <span class=\"token string\">\",code=sm_\"</span> <span class=\"token operator\">..</span> sm<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">add_ldflags</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-gencode arch=compute_\"</span> <span class=\"token operator\">..</span> sm <span class=\"token operator\">..</span> <span class=\"token string\">\",code=sm_\"</span> <span class=\"token operator\">..</span> sm<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token comment\">-- generate PTX code from the highest SM architecture to guarantee forward-compatibility</span>\n    sm <span class=\"token operator\">=</span> <span class=\"token string\">\"70\"</span>\n    <span class=\"token function\">add_cuflags</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-gencode arch=compute_\"</span> <span class=\"token operator\">..</span> sm <span class=\"token operator\">..</span> <span class=\"token string\">\",code=compute_\"</span> <span class=\"token operator\">..</span> sm<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_ldflags</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-gencode arch=compute_\"</span> <span class=\"token operator\">..</span> sm <span class=\"token operator\">..</span> <span class=\"token string\">\",code=compute_\"</span> <span class=\"token operator\">..</span> sm<span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>xmake will detect Cuda SDK automatically and we can also set the SDK directory manually.</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake f --cuda<span class=\"token operator\">=</span>/usr/local/cuda-9.1/ \n$ xmake\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If you want to known more information, you can see <a href=\"https://github.com/tboox/xmake/issues/158\" target=\"_blank\" rel=\"noopener noreferrer\">#158<OutboundLink/></a>.</p>\n<h4 id=\"wdk-driver-program\"><a class=\"header-anchor\" href=\"#wdk-driver-program\" aria-hidden=\"true\">#</a> WDK Driver Program</h4>\n<p>xmake will detect WDK automatically and we can also set the WDK directory manually.</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake f --wdk<span class=\"token operator\">=</span><span class=\"token string\">\"G:\\Program Files\\Windows Kits\\10\"</span> -c\n$ xmake\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If you want to known more information, you can see <a href=\"https://github.com/tboox/xmake/issues/159\" target=\"_blank\" rel=\"noopener noreferrer\">#159<OutboundLink/></a>.</p>\n<h5 id=\"umdf-driver-program\"><a class=\"header-anchor\" href=\"#umdf-driver-program\" aria-hidden=\"true\">#</a> UMDF Driver Program</h5>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"echo\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_rules</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.driver\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wdk.env.umdf\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"driver/*.c\"</span><span class=\"token punctuation\">)</span> \n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"driver/*.inx\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_includedirs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exe\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_rules</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.binary\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wdk.env.umdf\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exe/*.cpp\"</span><span class=\"token punctuation\">)</span> \n</code></pre>\n<!--beforeend--></div><!--afterend--><h5 id=\"kmdf-driver-program\"><a class=\"header-anchor\" href=\"#kmdf-driver-program\" aria-hidden=\"true\">#</a> KMDF Driver Program</h5>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nonpnp\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_rules</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.driver\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wdk.env.kmdf\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_values</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.tracewpp.flags\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-func:TraceEvents(LEVEL,FLAGS,MSG,...)\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-func:Hexdump((LEVEL,FLAGS,MSG,...))\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"driver/*.c\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>rule <span class=\"token operator\">=</span> <span class=\"token string\">\"wdk.tracewpp\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> \n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"driver/*.rc\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_rules</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.binary\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wdk.env.kmdf\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exe/*.c\"</span><span class=\"token punctuation\">)</span> \n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exe/*.inf\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h5 id=\"wdm-driver-program\"><a class=\"header-anchor\" href=\"#wdm-driver-program\" aria-hidden=\"true\">#</a> WDM Driver Program</h5>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kcs\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_rules</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.driver\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wdk.env.wdm\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_values</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.man.flags\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-prefix Kcs\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_values</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.man.resource\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kcsCounters.rc\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_values</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.man.header\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kcsCounters.h\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_values</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.man.counter_header\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kcsCounters_counters.h\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*.c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*.rc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*.man\"</span><span class=\"token punctuation\">)</span> \n</code></pre>\n<!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msdsm\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_rules</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.driver\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wdk.env.wdm\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_values</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.tracewpp.flags\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-func:TracePrint((LEVEL,FLAGS,MSG,...))\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*.c\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>rule <span class=\"token operator\">=</span> <span class=\"token string\">\"wdk.tracewpp\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> \n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*.rc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*.inf\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*.mof|msdsm.mof\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msdsm.mof\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>values <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>wdk_mof_header <span class=\"token operator\">=</span> <span class=\"token string\">\"msdsmwmi.h\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> \n</code></pre>\n<!--beforeend--></div><!--afterend--><h5 id=\"package-driver\"><a class=\"header-anchor\" href=\"#package-driver\" aria-hidden=\"true\">#</a> Package Driver</h5>\n<p>We can run the following command to generate a .cab driver package.</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake <span class=\"token punctuation\">[</span>p<span class=\"token operator\">|</span>package<span class=\"token punctuation\">]</span>\n$ xmake <span class=\"token punctuation\">[</span>p<span class=\"token operator\">|</span>package<span class=\"token punctuation\">]</span> -o outputdir\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>The output files like:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>  - drivers\n    - sampledsm\n       - debug/x86/sampledsm.cab\n       - release/x64/sampledsm.cab\n       - debug/x86/sampledsm.cab\n       - release/x64/sampledsm.cab\n</code></pre>\n<!--beforeend--></div><!--afterend--><h5 id=\"driver-signing\"><a class=\"header-anchor\" href=\"#driver-signing\" aria-hidden=\"true\">#</a> Driver Signing</h5>\n<p>The driver signing is disabled when we compile driver in default case,\nbut we can add <code>set_values(&quot;wdk.sign.mode&quot;)</code> to enable test/release sign.</p>\n<h6 id=\"testsign\"><a class=\"header-anchor\" href=\"#testsign\" aria-hidden=\"true\">#</a> TestSign</h6>\n<p>We can use test certificate of xmake to do testsign, but please run <code>$xmake l utils.wdk.testcert</code> install as admin to install a test certificate first (only once)!</p>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msdsm\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_rules</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.driver\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wdk.env.wdm\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">set_values</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.sign.mode\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Or we set a valid certificate thumbprint to do it in local machine.</p>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msdsm\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_rules</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.driver\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wdk.env.wdm\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">set_values</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.sign.mode\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">set_values</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.sign.thumbprint\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"032122545DCAA6167B1ADBE5F7FDF07AE2234AAA\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>We can also do testsign via setting store/company info.</p>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msdsm\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_rules</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.driver\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wdk.env.wdm\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">set_values</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.sign.mode\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">set_values</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.sign.store\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PrivateCertStore\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">set_values</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.sign.company\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tboox.org(test)\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h6 id=\"releasesign\"><a class=\"header-anchor\" href=\"#releasesign\" aria-hidden=\"true\">#</a> ReleaseSign</h6>\n<p>We can set a certificate file for release signing.</p>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msdsm\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_rules</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.driver\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wdk.env.wdm\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">set_values</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.sign.mode\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"release\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">set_values</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.sign.company\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xxxx\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">set_values</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.sign.certfile\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span><span class=\"token function\">projectdir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xxxx.cer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h5 id=\"support-low-version-system\"><a class=\"header-anchor\" href=\"#support-low-version-system\" aria-hidden=\"true\">#</a> Support Low-version System</h5>\n<p>We can set <code>wdk.env.winver</code> to generate a driver package that is compatible with a low version system.</p>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">set_values</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.env.winver\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"win10\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">set_values</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.env.winver\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"win10_rs3\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">set_values</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.env.winver\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"win81\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">set_values</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.env.winver\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"win8\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">set_values</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.env.winver\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"win7\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">set_values</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.env.winver\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"win7_sp1\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">set_values</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.env.winver\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"win7_sp2\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">set_values</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wdk.env.winver\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"win7_sp3\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>We can also set windows version for WDK driver program:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake f --wdk_winver<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>win10_rs3<span class=\"token operator\">|</span>win8<span class=\"token operator\">|</span>win7<span class=\"token operator\">|</span>win7_sp1<span class=\"token punctuation\">]</span>\n$ xmake\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"winsdk-application-program\"><a class=\"header-anchor\" href=\"#winsdk-application-program\" aria-hidden=\"true\">#</a> WinSDK Application Program</h4>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"usbview\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_rules</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"win.sdk.application\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*.c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*.rc\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xmlhelper.cpp\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>rule <span class=\"token operator\">=</span> <span class=\"token string\">\"win.sdk.dotnet\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If you want to known more information, you can see <a href=\"https://github.com/tboox/xmake/issues/173\" target=\"_blank\" rel=\"noopener noreferrer\">#173<OutboundLink/></a>.</p>\n<h2 id=\"configuration\"><a class=\"header-anchor\" href=\"#configuration\" aria-hidden=\"true\">#</a> Configuration</h2>\n<p>Set compilation configuration before building project with command <code>xmake f|config</code>.</p>\n<p>And if you want to known more options, please run: <code>xmake f --help</code>。</p>\n<p class=\"tip\">\n    You can use short or long command option, for exmaple: <br>\n    `xmake f` or `xmake config`.<br>\n    `xmake f -p linux` or `xmake config --plat=linux`.\n</p>\n<h4 id=\"target-platforms\"><a class=\"header-anchor\" href=\"#target-platforms\" aria-hidden=\"true\">#</a> Target Platforms</h4>\n<h5 id=\"current-host\"><a class=\"header-anchor\" href=\"#current-host\" aria-hidden=\"true\">#</a> Current Host</h5>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake\n</code></pre>\n<!--beforeend--></div><!--afterend--><p class=\"tip\">\n    XMake will detect the current host platform automatically and build project.\n</p>\n<h5 id=\"linux-2\"><a class=\"header-anchor\" href=\"#linux-2\" aria-hidden=\"true\">#</a> Linux</h5>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake f -p linux <span class=\"token punctuation\">[</span>-a i386<span class=\"token operator\">|</span>x86_64<span class=\"token punctuation\">]</span>\n$ xmake\n</code></pre>\n<!--beforeend--></div><!--afterend--><h5 id=\"android\"><a class=\"header-anchor\" href=\"#android\" aria-hidden=\"true\">#</a> Android</h5>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake f -p android --ndk<span class=\"token operator\">=</span>~/files/android-ndk-r10e/ <span class=\"token punctuation\">[</span>-a armv5te<span class=\"token operator\">|</span>armv6<span class=\"token operator\">|</span>armv7-a<span class=\"token operator\">|</span>armv8-a<span class=\"token operator\">|</span>arm64-v8a<span class=\"token punctuation\">]</span>\n$ xmake\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If you want to set the other android toolchains, you can use <a href=\"#-bin\">--bin</a> option.</p>\n<p>For example:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake f -p android --ndk<span class=\"token operator\">=</span>~/files/android-ndk-r10e/ -a arm64-v8a --bin<span class=\"token operator\">=</span>~/files/android-ndk-r10e/toolchains/aarch64-linux-android-4.9/prebuilt/darwin-x86_64/bin\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>The <a href=\"#-bin\">--bin</a> option is used to set <code>bin</code> directory of toolchains.</p>\n<p class=\"tip\">\nPlease attempt to set `--arch=` option if it had failed to check compiler.\n</p>\n<h5 id=\"iphoneos\"><a class=\"header-anchor\" href=\"#iphoneos\" aria-hidden=\"true\">#</a> iPhoneOS</h5>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake f -p iphoneos <span class=\"token punctuation\">[</span>-a armv7<span class=\"token operator\">|</span>armv7s<span class=\"token operator\">|</span>arm64<span class=\"token operator\">|</span>i386<span class=\"token operator\">|</span>x86_64<span class=\"token punctuation\">]</span>\n$ xmake\n</code></pre>\n<!--beforeend--></div><!--afterend--><h5 id=\"windows-2\"><a class=\"header-anchor\" href=\"#windows-2\" aria-hidden=\"true\">#</a> Windows</h5>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake f -p windows <span class=\"token punctuation\">[</span>-a x86<span class=\"token operator\">|</span>x64<span class=\"token punctuation\">]</span>\n$ xmake\n</code></pre>\n<!--beforeend--></div><!--afterend--><h5 id=\"mingw\"><a class=\"header-anchor\" href=\"#mingw\" aria-hidden=\"true\">#</a> Mingw</h5>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake f -p mingw --sdk<span class=\"token operator\">=</span>/usr/local/i386-mingw32-4.3.0/ <span class=\"token punctuation\">[</span>-a i386<span class=\"token operator\">|</span>x86_64<span class=\"token punctuation\">]</span>\n$ xmake\n</code></pre>\n<!--beforeend--></div><!--afterend--><h5 id=\"apple-watchos\"><a class=\"header-anchor\" href=\"#apple-watchos\" aria-hidden=\"true\">#</a> Apple WatchOS</h5>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake f -p watchos <span class=\"token punctuation\">[</span>-a i386<span class=\"token operator\">|</span>armv7k<span class=\"token punctuation\">]</span>\n$ xmake\n</code></pre>\n<!--beforeend--></div><!--afterend--><h5 id=\"cross-compilation\"><a class=\"header-anchor\" href=\"#cross-compilation\" aria-hidden=\"true\">#</a> Cross Compilation</h5>\n<p>For linux platform:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake f -p linux --sdk<span class=\"token operator\">=</span>/usr/local/arm-linux-gcc/ <span class=\"token punctuation\">[</span>--bin<span class=\"token operator\">=</span>/sdk/bin<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>--cross<span class=\"token operator\">=</span>arm-linux-<span class=\"token punctuation\">]</span>\n$ xmake\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Fro other cross platform:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake f -p cross --sdk<span class=\"token operator\">=</span>/usr/local/arm-xxx-gcc/ <span class=\"token punctuation\">[</span>--bin<span class=\"token operator\">=</span>/sdk/bin<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>--cross<span class=\"token operator\">=</span>arm-linux-<span class=\"token punctuation\">]</span>\n$ xmake\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>For custem cross platform (<code>is_plat(&quot;myplat&quot;)</code>):</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake f -p myplat --sdk<span class=\"token operator\">=</span>/usr/local/arm-xxx-gcc/ <span class=\"token punctuation\">[</span>--bin<span class=\"token operator\">=</span>/sdk/bin<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>--cross<span class=\"token operator\">=</span>arm-linux-<span class=\"token punctuation\">]</span>\n$ xmake\n</code></pre>\n<!--beforeend--></div><!--afterend--><table>\n<thead>\n<tr>\n<th>Configuration Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#-sdk\">--sdk</a></td>\n<td>Set the sdk root directory of toolchains</td>\n</tr>\n<tr>\n<td><a href=\"#-bin\">--bin</a></td>\n<td>Set the <code>bin</code> directory of toolchains</td>\n</tr>\n<tr>\n<td><a href=\"#-cross\">--cross</a></td>\n<td>Set the prefix of compilation tools</td>\n</tr>\n<tr>\n<td><a href=\"#-as\">--as</a></td>\n<td>Set <code>asm</code> assembler</td>\n</tr>\n<tr>\n<td><a href=\"#-cc\">--cc</a></td>\n<td>Set <code>c</code> compiler</td>\n</tr>\n<tr>\n<td><a href=\"#-cxx\">--cxx</a></td>\n<td>Set <code>c++</code> compiler</td>\n</tr>\n<tr>\n<td><a href=\"#-mm\">--mm</a></td>\n<td>Set <code>objc</code> compiler</td>\n</tr>\n<tr>\n<td><a href=\"#-mxx\">--mxx</a></td>\n<td>Set <code>objc++</code> compiler</td>\n</tr>\n<tr>\n<td><a href=\"#-sc\">--sc</a></td>\n<td>Set <code>swift</code> compiler</td>\n</tr>\n<tr>\n<td><a href=\"#-gc\">--gc</a></td>\n<td>Set <code>golang</code> compiler</td>\n</tr>\n<tr>\n<td><a href=\"#-dc\">--dc</a></td>\n<td>Set <code>dlang</code> compiler</td>\n</tr>\n<tr>\n<td><a href=\"#-rc\">--rc</a></td>\n<td>Set <code>rust</code> compiler</td>\n</tr>\n<tr>\n<td><a href=\"#-cu\">--cu</a></td>\n<td>Set <code>cuda</code> compiler</td>\n</tr>\n<tr>\n<td><a href=\"#-ld\">--ld</a></td>\n<td>Set <code>c/c++/objc/asm</code> linker</td>\n</tr>\n<tr>\n<td><a href=\"#-sh\">--sh</a></td>\n<td>Set <code>c/c++/objc/asm</code> shared library linker</td>\n</tr>\n<tr>\n<td><a href=\"#-ar\">--ar</a></td>\n<td>Set <code>c/c++/objc/asm</code> static library archiver</td>\n</tr>\n<tr>\n<td><a href=\"#-sc-ld\">--sc-ld</a></td>\n<td>Set <code>swift</code> linker</td>\n</tr>\n<tr>\n<td><a href=\"#-sc-sh\">--sc-sh</a></td>\n<td>Set <code>swift</code> shared library linker</td>\n</tr>\n<tr>\n<td><a href=\"#-gc-ld\">--gc-ld</a></td>\n<td>Set <code>golang</code> linker</td>\n</tr>\n<tr>\n<td><a href=\"#-gc-ar\">--gc-ar</a></td>\n<td>Set <code>golang</code> static library archiver</td>\n</tr>\n<tr>\n<td><a href=\"#-dc-ld\">--dc-ld</a></td>\n<td>Set <code>dlang</code> linker</td>\n</tr>\n<tr>\n<td><a href=\"#-dc-sh\">--dc-sh</a></td>\n<td>Set <code>dlang</code> shared library linker</td>\n</tr>\n<tr>\n<td><a href=\"#-dc-ar\">--dc-ar</a></td>\n<td>Set <code>dlang</code> static library archiver</td>\n</tr>\n<tr>\n<td><a href=\"#-rc-ld\">--rc-ld</a></td>\n<td>Set <code>rust</code> linker</td>\n</tr>\n<tr>\n<td><a href=\"#-rc-sh\">--rc-sh</a></td>\n<td>Set <code>rust</code> shared library linker</td>\n</tr>\n<tr>\n<td><a href=\"#-rc-ar\">--rc-ar</a></td>\n<td>Set <code>rust</code> static library archiver</td>\n</tr>\n<tr>\n<td><a href=\"#-cu-ld\">--cu-ld</a></td>\n<td>Set <code>cuda</code> linker</td>\n</tr>\n<tr>\n<td><a href=\"#-cu-sh\">--cu-sh</a></td>\n<td>Set <code>cuda</code> shared library linker</td>\n</tr>\n<tr>\n<td><a href=\"#-cu-ar\">--cu-ar</a></td>\n<td>Set <code>cuda</code> static library archiver</td>\n</tr>\n<tr>\n<td><a href=\"#-asflags\">--asflags</a></td>\n<td>Set <code>asm</code> assembler option</td>\n</tr>\n<tr>\n<td><a href=\"#-cflags\">--cflags</a></td>\n<td>Set <code>c</code> compiler option</td>\n</tr>\n<tr>\n<td><a href=\"#-cxflags\">--cxflags</a></td>\n<td>Set <code>c/c++</code> compiler option</td>\n</tr>\n<tr>\n<td><a href=\"#-cxxflags\">--cxxflags</a></td>\n<td>Set <code>c++</code> compiler option</td>\n</tr>\n<tr>\n<td><a href=\"#-mflags\">--mflags</a></td>\n<td>Set <code>objc</code> compiler option</td>\n</tr>\n<tr>\n<td><a href=\"#-mxflags\">--mxflags</a></td>\n<td>Set <code>objc/c++</code> compiler option</td>\n</tr>\n<tr>\n<td><a href=\"#-mxxflags\">--mxxflags</a></td>\n<td>Set <code>objc++</code> compiler option</td>\n</tr>\n<tr>\n<td><a href=\"#-scflags\">--scflags</a></td>\n<td>Set <code>swift</code> compiler option</td>\n</tr>\n<tr>\n<td><a href=\"#-gcflags\">--gcflags</a></td>\n<td>Set <code>golang</code> compiler option</td>\n</tr>\n<tr>\n<td><a href=\"#-dcflags\">--dcflags</a></td>\n<td>Set <code>dlang</code> compiler option</td>\n</tr>\n<tr>\n<td><a href=\"#-rcflags\">--rcflags</a></td>\n<td>Set <code>rust</code> compiler option</td>\n</tr>\n<tr>\n<td><a href=\"#-cuflags\">--cuflags</a></td>\n<td>Set <code>cuda</code> compiler option</td>\n</tr>\n<tr>\n<td><a href=\"#-ldflags\">--ldflags</a></td>\n<td>Set  linker option</td>\n</tr>\n<tr>\n<td><a href=\"#-shflags\">--shflags</a></td>\n<td>Set  shared library linker option</td>\n</tr>\n<tr>\n<td><a href=\"#-arflags\">--arflags</a></td>\n<td>Set  static library archiver option</td>\n</tr>\n</tbody>\n</table>\n<p class=\"tip\">\nif you want to known more options, please run: `xmake f --help`。\n</p>\n<h6 id=\"sdk\"><a class=\"header-anchor\" href=\"#sdk\" aria-hidden=\"true\">#</a> --sdk</h6>\n<ul>\n<li>Set the sdk root directory of toolchains</li>\n</ul>\n<p>xmake provides a convenient and flexible cross-compiling support.\nIn most cases, we need not to configure complex toolchains prefix, for example: <code>arm-linux-</code></p>\n<p>As long as this toolchains meet the following directory structure:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>/home/toolchains_sdkdir\n   - bin\n       - arm-linux-gcc\n       - arm-linux-ld\n       - ...\n   - lib\n       - libxxx.a\n   - include\n       - xxx.h\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Then，we can only configure the sdk directory and build it.</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake f -p linux --sdk<span class=\"token operator\">=</span>/home/toolchains_sdkdir\n$ xmake\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>xmake will detect the prefix: arm-linux- and add the include and library search directory automatically.</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>-I/home/toolchains_sdkdir/include -L/home/toolchains_sdkdir/lib\n</code></pre>\n<!--beforeend--></div><!--afterend--><h6 id=\"bin\"><a class=\"header-anchor\" href=\"#bin\" aria-hidden=\"true\">#</a> --bin</h6>\n<ul>\n<li>Set the <code>bin</code> directory of toolchains</li>\n</ul>\n<p>We need set it manually if the toolchains /bin directory is in other places, for example:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake f -p linux --sdk<span class=\"token operator\">=</span>/home/toolchains_sdkdir --bin<span class=\"token operator\">=</span>/usr/opt/bin\n$ xmake\n</code></pre>\n<!--beforeend--></div><!--afterend--><p class=\"tips\">\nBefore v2.2.1 version, this parameter name is `--toolchains`, exists more ambiguous, so we changed to `--bin=` to set the bin directory.\n</p>\n<h6 id=\"cross\"><a class=\"header-anchor\" href=\"#cross\" aria-hidden=\"true\">#</a> --cross</h6>\n<ul>\n<li>Set the prefix of compilation tools</li>\n</ul>\n<p>For example, under the same toolchains directory at the same time, there are two different compilers:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>/opt/bin\n - armv7-linux-gcc\n - aarch64-linux-gcc\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If we want to use the <code>armv7-linux-gcc</code> compiler, we can run the following command:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake f -p linux --sdk<span class=\"token operator\">=</span>/usr/toolsdk --bin<span class=\"token operator\">=</span>/opt/bin --cross<span class=\"token operator\">=</span>armv7-linux-\n</code></pre>\n<!--beforeend--></div><!--afterend--><h6 id=\"as\"><a class=\"header-anchor\" href=\"#as\" aria-hidden=\"true\">#</a> --as</h6>\n<ul>\n<li>Set <code>asm</code> assembler</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake f -p linux --sdk<span class=\"token operator\">=</span>/user/toolsdk --as<span class=\"token operator\">=</span>armv7-linux-as\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If the 'AS' environment variable exists, it will use the values specified in the current environment variables.</p>\n<p class=\"tips\">\nWe can set a unknown compiler as like-gcc/clang compiler, .e.g `xmake f --as=gcc@/home/xxx/asmips.exe` \n</p>\n<h6 id=\"cc\"><a class=\"header-anchor\" href=\"#cc\" aria-hidden=\"true\">#</a> --cc</h6>\n<ul>\n<li>Set c compiler</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake f -p linux --sdk<span class=\"token operator\">=</span>/user/toolsdk --cc<span class=\"token operator\">=</span>armv7-linux-clang\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If the 'CC' environment variable exists, it will use the values specified in the current environment variables.</p>\n<p class=\"tips\">\nWe can set a unknown compiler as like-gcc/clang compiler, .e.g `xmake f --cc=gcc@/home/xxx/ccmips.exe` \n</p>\n<h6 id=\"cxx\"><a class=\"header-anchor\" href=\"#cxx\" aria-hidden=\"true\">#</a> --cxx</h6>\n<ul>\n<li>Set <code>c++</code> compiler</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake f -p linux --sdk<span class=\"token operator\">=</span>/user/toolsdk --cxx<span class=\"token operator\">=</span>armv7-linux-clang++\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If the 'CXX' environment variable exists, it will use the values specified in the current environment variables.</p>\n<p class=\"tips\">\nWe can set a unknown compiler as like-gcc/clang compiler, .e.g `xmake f --cxx=g++@/home/xxx/c++mips.exe` \n</p>\n<h6 id=\"ld\"><a class=\"header-anchor\" href=\"#ld\" aria-hidden=\"true\">#</a> --ld</h6>\n<ul>\n<li>Set <code>c/c++/objc/asm</code> linker</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake f -p linux --sdk<span class=\"token operator\">=</span>/user/toolsdk --ld<span class=\"token operator\">=</span>armv7-linux-clang++\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If the 'LD' environment variable exists, it will use the values specified in the current environment variables.</p>\n<p class=\"tips\">\nWe can set a unknown compiler as like-gcc/clang linker, .e.g `xmake f --ld=g++@/home/xxx/c++mips.exe` \n</p>\n<h6 id=\"sh\"><a class=\"header-anchor\" href=\"#sh\" aria-hidden=\"true\">#</a> --sh</h6>\n<ul>\n<li>Set <code>c/c++/objc/asm</code> shared library linker</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake f -p linux --sdk<span class=\"token operator\">=</span>/user/toolsdk --sh<span class=\"token operator\">=</span>armv7-linux-clang++\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If the 'SH' environment variable exists, it will use the values specified in the current environment variables.</p>\n<p class=\"tips\">\nWe can set a unknown compiler as like-gcc/clang linker, .e.g `xmake f --sh=g++@/home/xxx/c++mips.exe` \n</p>\n<h6 id=\"ar\"><a class=\"header-anchor\" href=\"#ar\" aria-hidden=\"true\">#</a> --ar</h6>\n<ul>\n<li>Set <code>c/c++/objc/asm</code> static library archiver</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake f -p linux --sdk<span class=\"token operator\">=</span>/user/toolsdk --ar<span class=\"token operator\">=</span>armv7-linux-ar\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If the 'AR' environment variable exists, it will use the values specified in the current environment variables.</p>\n<p class=\"tips\">\nWe can set a unknown compiler as like-ar archiver, .e.g `xmake f --ar=ar@/home/xxx/armips.exe` \n</p>\n<h4 id=\"global-configuration\"><a class=\"header-anchor\" href=\"#global-configuration\" aria-hidden=\"true\">#</a> Global Configuration</h4>\n<p>You can save to the global configuration for simplfying operation.</p>\n<p>For example:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake g --ndk<span class=\"token operator\">=</span>~/files/android-ndk-r10e/\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Now, we config and build project for android again.</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake f -p android\n$ xmake\n</code></pre>\n<!--beforeend--></div><!--afterend--><p class=\"tip\">\n    You can use short or long command option, for exmaple: `xmake g` or `xmake global`.<br>\n</p>\n<h4 id=\"clean-configuration\"><a class=\"header-anchor\" href=\"#clean-configuration\" aria-hidden=\"true\">#</a> Clean Configuration</h4>\n<p>We can clean all cached configuration and re-configure projecct.</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake f -c\n$ xmake\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>or</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake f -p iphoneos -c\n$ xmake\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"dependency-package-management\"><a class=\"header-anchor\" href=\"#dependency-package-management\" aria-hidden=\"true\">#</a> Dependency Package Management</h2>\n<h4 id=\"local-package-mode\"><a class=\"header-anchor\" href=\"#local-package-mode\" aria-hidden=\"true\">#</a> Local Package Mode</h4>\n<p>By including a dependency package directory and a binary package file in the project, it is convenient to integrate some third-party dependency libraries. This method is relatively simple and straightforward, but the disadvantages are also obvious and inconvenient to manage.</p>\n<p>Take the tbox project as an example. The dependency package is as follows:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>- base.pkg\n- zlib.pkg\n- polarssl.pkg\n- openssl.pkg\n- mysql.pkg\n- pcre.pkg\n- ...\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If you want the current project to recognize loading these packages, you first need to specify the package directory path, for example:</p>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">add_packagedirs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"packages\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Once specified, you can add integration package dependencies in the target scope via the <a href=\"https://xmake.io/#/zh/manual?id=targetadd_packages\" target=\"_blank\" rel=\"noopener noreferrer\">add_packages<OutboundLink/></a> interface, for example:</p>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tbox\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_packages</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zlib\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"polarssl\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pcre\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mysql\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>So how to generate a *.pkg package, if it is based on xmake project, the generation method is very simple, only need:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ <span class=\"token function\">cd</span> tbox\n$ xmake package\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>You can generate a tbox.pkg cross-platform package in the build directory for use by third-party projects. I can also directly set the output directory and compile and generate it into the other project, for example:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ <span class=\"token function\">cd</span> tbox\n$ xmake package -o <span class=\"token punctuation\">..</span>/test/packages\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>In this way, the test project can pass <a href=\"https://xmake.io/#/zh/manual?id=targetadd_packages\" target=\"_blank\" rel=\"noopener noreferrer\">add_packages<OutboundLink/></a> and [add_packagedirs](https://xmake.io/#/zh/manual?id= add_packagedirs) to configure and use the tbox.pkg package.</p>\n<p>For a detailed description of the built-in package, you can also refer to the following related article, which is described in detail: [Dependency package addition and automatic detection mechanism] (http://tboox.org/cn/2016/08/06/add-package -and-autocheck/)</p>\n<h4 id=\"system-search-mode\"><a class=\"header-anchor\" href=\"#system-search-mode\" aria-hidden=\"true\">#</a> System Search Mode</h4>\n<p>If you feel that the above built-in package management method is very inconvenient, you can use the extension interface [lib.detect.find_package] provided by xmake (https://xmake.io/#/zh/manual?id=detect-find_package) to find the system. Existing dependencies.</p>\n<p>Currently this interface supports the following package management support:</p>\n<ul>\n<li>vcpkg</li>\n<li>homebrew</li>\n<li>pkg-config</li>\n</ul>\n<p>And through the system and third-party package management tools for the installation of the dependency package, and then integrated with xmake, for example, we look for an openssl package:</p>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lib.detect.find_package\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">local</span> package <span class=\"token operator\">=</span> <span class=\"token function\">find_package</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"openssl\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>The returned results are as follows:</p>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token punctuation\">{</span>links <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"ssl\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"crypto\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"z\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> linkdirs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"/usr/local/lib\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> includedirs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"/usr/local/include\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If the search is successful, return a table containing all the package information, if it fails, return nil</p>\n<p>The return result here can be directly passed as the parameter of <code>target:add</code>, <code>option:add</code>, which is used to dynamically increase the configuration of <code>target/option</code>:</p>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zlib\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">set_showmenu</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">before_check</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lib.detect.find_package\"</span><span class=\"token punctuation\">)</span>\n        option<span class=\"token punctuation\">:</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">find_package</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zlib\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">on_load</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lib.detect.find_package\"</span><span class=\"token punctuation\">)</span>\n        target<span class=\"token punctuation\">:</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">find_package</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zlib\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If third-party tools such as <code>homebrew</code>, <code>pkg-config</code> are installed on the system, then this interface will try to use them to improve the search results.</p>\n<p>For a more complete description of the usage, please refer to the <a href=\"https://xmake.io/#/en/manual?id=detect-find_package\" target=\"_blank\" rel=\"noopener noreferrer\">lib.detect.find_package<OutboundLink/></a> interface documentation.</p>\n<h5 id=\"homebrew-integration-support\"><a class=\"header-anchor\" href=\"#homebrew-integration-support\" aria-hidden=\"true\">#</a> Homebrew Integration Support</h5>\n<p>Since homebrew is generally installed directly into the system, users do not need to do any integration work, <code>lib.detect.find_package</code> has been natively seamlessly supported.</p>\n<h5 id=\"vcpkg-integration-support\"><a class=\"header-anchor\" href=\"#vcpkg-integration-support\" aria-hidden=\"true\">#</a> Vcpkg Integration Support</h5>\n<p>Currently xmake v2.2.2 version already supports vcpkg, users only need to install vcpkg, execute <code>$ vcpkg integrate install</code>, xmake will automatically detect the root path of vcpkg from the system, and then automatically adapt the bread.</p>\n<p>Of course, we can also manually specify the root path of vcpkg to support:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake f --vcpkg<span class=\"token operator\">=</span>f:\\vcpkg\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Or we can set it to the global configuration to avoid repeating the settings each time we switch configurations:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake g --vcpkg<span class=\"token operator\">=</span>f:\\vcpkg\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"remote-dependency-mode\"><a class=\"header-anchor\" href=\"#remote-dependency-mode\" aria-hidden=\"true\">#</a> Remote dependency mode</h4>\n<p>This has been initially supported after the 2.2.2 version, the usage is much simpler, just set the corresponding dependency package, for example:</p>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">add_requires</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tbox 1.6.*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"libpng ~1.16\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"zlib\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">set_kind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"binary\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/*.c\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_packages</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tbox\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"libpng\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"zlib\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>The above <code>add_requires</code> is used to describe the dependencies required by the current project, and <code>add_packages</code> is used to apply dependencies to the test target. Only settings will automatically add links, linkdirs, includedirs, etc.</p>\n<p>Then directly compile:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>xmake will remotely pull the relevant source package, then automatically compile and install, finally compile the project, and link the dependency package. The specific effect is shown in the following figure:</p>\n<img src=\"/assets/img/index/package_manage.png\" width=\"80%\" />\n<p>For more information and progress on package dependency management see the related issues: [Remote package management] (https://github.com/tboox/xmake/issues/69)</p>\n<h5 id=\"currently-supported-features\"><a class=\"header-anchor\" href=\"#currently-supported-features\" aria-hidden=\"true\">#</a> Currently Supported Features</h5>\n<ul>\n<li>Semantic version support, for example: &quot;&gt;= 1.1.0 &lt; 1.2&quot;, &quot;~1.6&quot;, &quot;1.2.x&quot;, &quot;1.*&quot;</li>\n<li>Provide multi-warehouse management support such as official package warehouse, self-built private warehouse, project built-in warehouse, etc.</li>\n<li>Cross-platform package compilation integration support (packages of different platforms and different architectures can be installed at the same time, fast switching use)</li>\n<li>Debug dependency package support, source code debugging</li>\n</ul>\n<h5 id=\"dependency-package-processing-mechanism\"><a class=\"header-anchor\" href=\"#dependency-package-processing-mechanism\" aria-hidden=\"true\">#</a> Dependency Package Processing Mechanism</h5>\n<p>Here we briefly introduce the processing mechanism of the entire dependency package:</p>\n<div align=\"center\">\n<img src=\"/assets/img/index/package_arch.png\" width=\"80%\" />\n</div>\n<ol>\n<li>Priority check for the current system directory, whether there is a specified package under the third-party package management, if there is a matching package, then you do not need to download and install (of course you can also set the system package)</li>\n<li>Retrieve the package matching the corresponding version, then download, compile, and install (Note: installed in a specific xmake directory, will not interfere with the system library environment)</li>\n<li>Compile the project, and finally automatically link the enabled dependencies</li>\n</ol>\n<h5 id=\"semantic-version-settings\"><a class=\"header-anchor\" href=\"#semantic-version-settings\" aria-hidden=\"true\">#</a> Semantic Version Settings</h5>\n<p>Xmake's dependency package management fully supports semantic version selection, for example: &quot;~1.6.1&quot;. For a detailed description of the semantic version, see: [http://semver.org/] (http://semver.org/)</p>\n<p>Some semantic versions are written:</p>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">add_requires</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tbox 1.6.*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pcre 1.3.x\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"libpng ^1.18\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">add_requires</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libpng ~1.16\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"zlib 1.1.2 || >=1.2.11 &lt;1.3.0\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>The semantic version parser currently used by xmake is the <a href=\"https://github.com/uael/sv\" target=\"_blank\" rel=\"noopener noreferrer\">sv<OutboundLink/></a> library contributed by <a href=\"https://github.com/uael\" target=\"_blank\" rel=\"noopener noreferrer\">uael<OutboundLink/></a>, which also has a description of the version. For detailed instructions, please refer to the following: [Version Description] (https://github.com/uael/sv#versions)</p>\n<p>Of course, if we have no special requirements for the current version of the dependency package, then we can write directly:</p>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">add_requires</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tbox\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"libpng\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"zlib\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>This will use the latest version of the package known, or the source code compiled by the master branch. If the current package has a git repo address, we can also specify a specific branch version:</p>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">add_requires</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tbox master\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">add_requires</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tbox dev\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h5 id=\"extra-package-information-settings\"><a class=\"header-anchor\" href=\"#extra-package-information-settings\" aria-hidden=\"true\">#</a> Extra Package Information Settings</h5>\n<h6 id=\"optional-package-settings\"><a class=\"header-anchor\" href=\"#optional-package-settings\" aria-hidden=\"true\">#</a> Optional Package Settings</h6>\n<p>If the specified dependency package is not supported by the current platform, or if the compilation and installation fails, then xmake will compile the error, which is reasonable for some projects that must rely on certain packages to work.\nHowever, if some packages are optional dependencies, they can be set to optional packages even if they are not compiled properly.</p>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">add_requires</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tbox\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>optional <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h6 id=\"disable-system-library\"><a class=\"header-anchor\" href=\"#disable-system-library\" aria-hidden=\"true\">#</a> Disable System Library</h6>\n<p>With the default settings, xmake will first check to see if the system library exists (if no version is required). If the user does not want to use the system library and the library provided by the third-party package management, then you can set:</p>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">add_requires</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tbox\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>system <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h6 id=\"using-the-debug-version-of-the-package\"><a class=\"header-anchor\" href=\"#using-the-debug-version-of-the-package\" aria-hidden=\"true\">#</a> Using the debug version of the package</h6>\n<p>If we want to debug the dependencies at the same time, we can set them to use the debug version of the package (provided that this package supports debug compilation):</p>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">add_requires</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tbox\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>debug <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If the current package does not support debug compilation, you can submit the modified compilation rules in the repository to support the debug, for example:</p>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">package</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"openssl\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">on_install</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"linux\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"macosx\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>package<span class=\"token punctuation\">)</span>\n        os<span class=\"token punctuation\">.</span><span class=\"token function\">vrun</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./config %s --prefix=\\\"%s\\\"\"</span><span class=\"token punctuation\">,</span> package<span class=\"token punctuation\">:</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token string\">\"--debug\"</span> <span class=\"token keyword\">or</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> package<span class=\"token punctuation\">:</span><span class=\"token function\">installdir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        os<span class=\"token punctuation\">.</span><span class=\"token function\">vrun</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"make -j4\"</span><span class=\"token punctuation\">)</span>\n        os<span class=\"token punctuation\">.</span><span class=\"token function\">vrun</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"make install\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h6 id=\"passing-additional-compilation-information-to-the-package\"><a class=\"header-anchor\" href=\"#passing-additional-compilation-information-to-the-package\" aria-hidden=\"true\">#</a> Passing additional compilation information to the package</h6>\n<p>Some packages have various compile options at compile time, and we can pass them in. Of course, the package itself supports:</p>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">add_requires</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tbox\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>small<span class=\"token operator\">=</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Pass <code>--small=true</code> to the tbox package so that compiling the installed tbox package is enabled.</p>\n<h5 id=\"using-self-built-private-package-warehouse\"><a class=\"header-anchor\" href=\"#using-self-built-private-package-warehouse\" aria-hidden=\"true\">#</a> Using self-built private package warehouse</h5>\n<p>If the required package is not in the official repository <a href=\"https://github.com/tboox/xmake-repo\" target=\"_blank\" rel=\"noopener noreferrer\">xmake-repo<OutboundLink/></a>, we can submit the contribution code to the repository for support.\nBut if some packages are only for personal or private projects, we can create a private repository repo. The repository organization structure can be found at: <a href=\"https://github.com/tboox/xmake-repo\" target=\"_blank\" rel=\"noopener noreferrer\">xmake-repo<OutboundLink/></a></p>\n<p>For example, now we have a private repository repo:<code>git@github.com:myrepo/xmake-repo.git</code></p>\n<p>We can add the repository with the following command:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake repo --add myrepo git@github.com:myrepo/xmake-repo.git\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Or we write directly in xmake.lua:</p>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">add_repositories</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-repo git@github.com:myrepo/xmake-repo.git\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If we just want to add one or two private packages, this time to build a git repo is too big, we can directly put the package repository into the project, for example:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>projectdir\n  - myrepo\n    - packages\n      - t/tbox/xmake.lua\n      - z/zlib/xmake.lua\n  - src\n    - main.c\n  - xmake.lua\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>The above myrepo directory is your own private package repository, built into your own project, and then add this repository location in xmake.lua:</p>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">add_repositories</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-repo myrepo\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>This can be referred to [benchbox] (https://github.com/tboox/benchbox) project, which has a built-in private repository.</p>\n<p>We can even build a package without directly building a package description into the project xmake.lua, which is useful for relying on one or two packages, for example:</p>\n<!--beforebegin--><div class=\"language-lua extra-class\"><!--afterbegin--><pre v-pre class=\"language-lua\"><code><span class=\"token function\">package</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libjpeg\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">set_urls</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://www.ijg.org/files/jpegsrc.$(version).tar.gz\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">add_versions</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v9c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"650250979303a649e21f87b5ccd02672af1ea6954b911342ea491f351ceb7122\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">on_install</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"windows\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>package<span class=\"token punctuation\">)</span>\n        os<span class=\"token punctuation\">.</span><span class=\"token function\">mv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jconfig.vc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jconfig.h\"</span><span class=\"token punctuation\">)</span>\n        os<span class=\"token punctuation\">.</span><span class=\"token function\">vrun</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nmake -f makefile.vc\"</span><span class=\"token punctuation\">)</span>\n        os<span class=\"token punctuation\">.</span><span class=\"token function\">cp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*.h\"</span><span class=\"token punctuation\">,</span> package<span class=\"token punctuation\">:</span><span class=\"token function\">installdir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"include\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        os<span class=\"token punctuation\">.</span><span class=\"token function\">cp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libjpeg.lib\"</span><span class=\"token punctuation\">,</span> package<span class=\"token punctuation\">:</span><span class=\"token function\">installdir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lib\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">on_install</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"macosx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"linux\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>package<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"package.tools.autoconf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">install</span><span class=\"token punctuation\">(</span>package<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">package_end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">add_requires</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libjpeg\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">set_kind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"binary\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_files</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/*.c\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">add_packages</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libjpeg\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h5 id=\"package-management-command-use\"><a class=\"header-anchor\" href=\"#package-management-command-use\" aria-hidden=\"true\">#</a> Package Management Command Use</h5>\n<p>The package management command <code>$ xmake require</code> can be used to manually display the download, install, uninstall, retrieve, and view package information.</p>\n<h6 id=\"install-the-specified-package\"><a class=\"header-anchor\" href=\"#install-the-specified-package\" aria-hidden=\"true\">#</a> Install the specified package</h6>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake require tbox\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Install the specified version package:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake require tbox <span class=\"token string\">\"~1.6\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Force a re-download of the installation and display detailed installation information:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake require -f -v tbox <span class=\"token string\">\"1.5.x\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Pass additional setup information:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake require --extra<span class=\"token operator\">=</span><span class=\"token string\">\"debug=true,config={small=true}\"</span> tbox\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Install the debug package and pass the compilation configuration information of <code>small=true</code> to the package.</p>\n<h6 id=\"uninstalling-the-specified-package\"><a class=\"header-anchor\" href=\"#uninstalling-the-specified-package\" aria-hidden=\"true\">#</a> Uninstalling the specified package</h6>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake require --uninstall tbox\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>This will completely uninstall the removal package file.</p>\n<h6 id=\"remove-the-specified-package\"><a class=\"header-anchor\" href=\"#remove-the-specified-package\" aria-hidden=\"true\">#</a> Remove the specified package</h6>\n<p>Only unlink specifies the package, it is not detected by the current project, but the package still exists locally. If it is reinstalled, it will be completed very quickly.</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake require --unlink tbox\n</code></pre>\n<!--beforeend--></div><!--afterend--><h6 id=\"view-package-details\"><a class=\"header-anchor\" href=\"#view-package-details\" aria-hidden=\"true\">#</a> View package details</h6>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake require --info tbox\n</code></pre>\n<!--beforeend--></div><!--afterend--><h6 id=\"search-for-packages-in-the-current-warehouse\"><a class=\"header-anchor\" href=\"#search-for-packages-in-the-current-warehouse\" aria-hidden=\"true\">#</a> Search for packages in the current warehouse</h6>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake require --search tbox\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>This is to support fuzzy search and lua pattern matching search:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake require --search pcr\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Will also search for pcre, pcre2 and other packages.</p>\n<h6 id=\"list-the-currently-installed-packages\"><a class=\"header-anchor\" href=\"#list-the-currently-installed-packages\" aria-hidden=\"true\">#</a> List the currently installed packages</h6>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake require --list\n</code></pre>\n<!--beforeend--></div><!--afterend--><h5 id=\"warehouse-management-command-use\"><a class=\"header-anchor\" href=\"#warehouse-management-command-use\" aria-hidden=\"true\">#</a> Warehouse Management Command Use</h5>\n<p>As mentioned above, adding a private repository is available (supporting local path addition):</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake repo --add myrepo git@github.com:myrepo/xmake-repo.git\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>We can also remove a repository that has already been installed:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake repo --remove myrepo\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Or view all the added warehouses:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake repo --list\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If the remote repository has updates, you can manually perform a warehouse update to get more and the latest packages:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>$ xmake repo -u\n</code></pre>\n<!--beforeend--></div><!--afterend--><h5 id=\"submit-the-package-to-the-official-warehouse\"><a class=\"header-anchor\" href=\"#submit-the-package-to-the-official-warehouse\" aria-hidden=\"true\">#</a> Submit the package to the official warehouse</h5>\n<p>If you need a package that is not supported by the current official repository, you can commit it to the official repository after local tuning: <a href=\"https://github.com/tboox/xmake-repo\" target=\"_blank\" rel=\"noopener noreferrer\">xmake-repo<OutboundLink/></a></p>\n<p>For detailed contribution descriptions, see: <a href=\"https://github.com/tboox/xmake-repo/blob/master/CONTRIBUTING.md\" target=\"_blank\" rel=\"noopener noreferrer\">CONTRIBUTING.md<OutboundLink/></a></p>\n</div>\n",null]}